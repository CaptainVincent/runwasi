name: CI

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

on:
  push:
    branches: [enhance-plugin-usability]
    tags:
      - 'v*'
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always

jobs:
  hub:
    strategy:
      matrix:
        include:
          - kind: legacy
            repo_slug: vincent2nd/runwasi
          - kind: installable
            repo_slug: vincent2nd/runwasi-installable
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ matrix.repo_slug }}
          ### frontend versioning
          ### on semver tag:
          # wasmedge/runwasi:1.2.3
          # wasmedge/runwasi:1.2
          # wasmedge/runwasi:1
          # wasmedge/runwasi:latest
          ### on pre-release tag:
          # wasmedge/runwasi:1.1.0-rc.1
          ### on push default branch (main):
          # wasmedge/runwasi:main
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=ref,event=branch
            type=raw,value=latest
            type=ref,event=pr
          bake-target: meta-helper
          flavor: |
            latest=false
      - name: Login to DockerHub
        if: ${{ github.event_name != 'pull_request' }}
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      - name: Build and push
        uses: docker/bake-action@v2
        with:
          files: |
            ./docker-bake.hcl
            ${{ steps.meta.outputs.bake-file }}
          targets: image-cross-${{matrix.kind}}
          push: ${{ github.event_name != 'pull_request' }}

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Setup WasmEdge build env
        run: |
          curl -sSf https://raw.githubusercontent.com/WasmEdge/WasmEdge/master/utils/install.sh | bash -s -- --version=0.12.1
          echo "LD_LIBRARY_PATH=$HOME/.wasmedge/lib" >> $GITHUB_ENV
          rustup default nightly
      - name: Build
        run: cargo build --verbose
      - name: Run tests
        run: cargo test --verbose

  verify-installable-img:
    needs: hub
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Install wasmedge shim and libs from prebuilt docker image
        run: |
          sudo ctr content fetch docker.io/vincent2nd/runwasi-installable:latest
          sudo ctr install docker.io/vincent2nd/runwasi-installable:latest -l -r
      - name: Update rust toolchain
        run: |
          rustup default nightly
          rustup target add wasm32-wasi
      - name: Build test image
        run: make load
      - name: Run basic test
        run: sudo ctr run --rm --runtime=io.containerd.wasmedge.v1 ghcr.io/containerd/runwasi/wasi-demo-app:latest testwasm /wasi-demo-app.wasm echo 'hello'
      - name: Manually build wasi_nn demo image
        run: |
          cp demo/utils/build.rs demo/wasinn/pytorch-mobilenet-image/rust
          cd demo/wasinn/pytorch-mobilenet-image/rust
          cargo add --build tar@0.4 sha256@1.1 log@0.4 env_logger@0.10 oci-spec@0.5 anyhow@1.0
          cargo add --build oci-tar-builder --git https://github.com/containerd/runwasi --rev a2f86e4
          cargo build --target=wasm32-wasi
          BUILD_IMAGE=TRUE cargo build --target=wasm32-wasi
          sudo ctr -n default image import --all-platforms target/wasm32-wasi/debug/img.tar
      - name: Run wasi_nn test
        run: |
          sudo ctr run --rm \
            --mount type=bind,src=$PWD/demo/wasinn/pytorch-mobilenet-image,dst=/resource,options=rbind \
            --runtime=io.containerd.wasmedge.v1 \
            ghcr.io/containerd/runwasi/wasmedge-wasinn-example-mobilenet-image:latest \
            testwasinn \
            /app.wasm /resource/mobilenet.pt /resource/input.jpg